/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace RewardsDataTypes {
  export type RewardsConfigInputStruct = {
    emissionPerSecond: BigNumberish;
    totalSupply: BigNumberish;
    distributionEnd: BigNumberish;
    asset: string;
    reward: string;
    transferStrategy: string;
    rewardOracle: string;
  };

  export type RewardsConfigInputStructOutput = [BigNumber, BigNumber, number, string, string, string, string] & {
    emissionPerSecond: BigNumber;
    totalSupply: BigNumber;
    distributionEnd: number;
    asset: string;
    reward: string;
    transferStrategy: string;
    rewardOracle: string;
  };
}

export interface RewardsControllerInterface extends utils.Interface {
  functions: {
    'REVISION()': FunctionFragment;
    'claimAllRewards(address[],address)': FunctionFragment;
    'claimAllRewardsOnBehalf(address[],address,address)': FunctionFragment;
    'claimAllRewardsToSelf(address[])': FunctionFragment;
    'claimRewards(address[],uint256,address,address)': FunctionFragment;
    'claimRewardsOnBehalf(address[],uint256,address,address,address)': FunctionFragment;
    'claimRewardsToSelf(address[],uint256,address)': FunctionFragment;
    'configureAssets((uint88,uint256,uint32,address,address,address,address)[])': FunctionFragment;
    'getAllUserRewards(address[],address)': FunctionFragment;
    'getAssetDecimals(address)': FunctionFragment;
    'getClaimer(address)': FunctionFragment;
    'getDistributionEnd(address,address)': FunctionFragment;
    'getEmissionManager()': FunctionFragment;
    'getRewardOracle(address)': FunctionFragment;
    'getRewardsByAsset(address)': FunctionFragment;
    'getRewardsData(address,address)': FunctionFragment;
    'getRewardsList()': FunctionFragment;
    'getTransferStrategy(address)': FunctionFragment;
    'getUserAccruedRewards(address,address)': FunctionFragment;
    'getUserAssetIndex(address,address,address)': FunctionFragment;
    'getUserRewards(address[],address,address)': FunctionFragment;
    'handleAction(address,uint256,uint256)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'setClaimer(address,address)': FunctionFragment;
    'setDistributionEnd(address,address,uint32)': FunctionFragment;
    'setEmissionManager(address)': FunctionFragment;
    'setEmissionPerSecond(address,address[],uint88[])': FunctionFragment;
    'setRewardOracle(address,address)': FunctionFragment;
    'setTransferStrategy(address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'REVISION'
      | 'claimAllRewards'
      | 'claimAllRewardsOnBehalf'
      | 'claimAllRewardsToSelf'
      | 'claimRewards'
      | 'claimRewardsOnBehalf'
      | 'claimRewardsToSelf'
      | 'configureAssets'
      | 'getAllUserRewards'
      | 'getAssetDecimals'
      | 'getClaimer'
      | 'getDistributionEnd'
      | 'getEmissionManager'
      | 'getRewardOracle'
      | 'getRewardsByAsset'
      | 'getRewardsData'
      | 'getRewardsList'
      | 'getTransferStrategy'
      | 'getUserAccruedRewards'
      | 'getUserAssetIndex'
      | 'getUserRewards'
      | 'handleAction'
      | 'initialize'
      | 'setClaimer'
      | 'setDistributionEnd'
      | 'setEmissionManager'
      | 'setEmissionPerSecond'
      | 'setRewardOracle'
      | 'setTransferStrategy'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'REVISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimAllRewards', values: [string[], string]): string;
  encodeFunctionData(functionFragment: 'claimAllRewardsOnBehalf', values: [string[], string, string]): string;
  encodeFunctionData(functionFragment: 'claimAllRewardsToSelf', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'claimRewards', values: [string[], BigNumberish, string, string]): string;
  encodeFunctionData(
    functionFragment: 'claimRewardsOnBehalf',
    values: [string[], BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: 'claimRewardsToSelf', values: [string[], BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'configureAssets',
    values: [RewardsDataTypes.RewardsConfigInputStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'getAllUserRewards', values: [string[], string]): string;
  encodeFunctionData(functionFragment: 'getAssetDecimals', values: [string]): string;
  encodeFunctionData(functionFragment: 'getClaimer', values: [string]): string;
  encodeFunctionData(functionFragment: 'getDistributionEnd', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getEmissionManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRewardOracle', values: [string]): string;
  encodeFunctionData(functionFragment: 'getRewardsByAsset', values: [string]): string;
  encodeFunctionData(functionFragment: 'getRewardsData', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getRewardsList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTransferStrategy', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUserAccruedRewards', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getUserAssetIndex', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'getUserRewards', values: [string[], string, string]): string;
  encodeFunctionData(functionFragment: 'handleAction', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(functionFragment: 'setClaimer', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setDistributionEnd', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setEmissionManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'setEmissionPerSecond', values: [string, string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'setRewardOracle', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setTransferStrategy', values: [string, string]): string;

  decodeFunctionResult(functionFragment: 'REVISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAllRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAllRewardsOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAllRewardsToSelf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewardsOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewardsToSelf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'configureAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllUserRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDistributionEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEmissionManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsByAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTransferStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserAccruedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserAssetIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'handleAction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDistributionEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmissionManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmissionPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTransferStrategy', data: BytesLike): Result;

  events: {
    'Accrued(address,address,address,uint256,uint256,uint256)': EventFragment;
    'AssetConfigUpdated(address,address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'ClaimerSet(address,address)': EventFragment;
    'EmissionManagerUpdated(address,address)': EventFragment;
    'RewardOracleUpdated(address,address)': EventFragment;
    'RewardsClaimed(address,address,address,address,uint256)': EventFragment;
    'TransferStrategyInstalled(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Accrued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetConfigUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmissionManagerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferStrategyInstalled'): EventFragment;
}

export interface AccruedEventObject {
  asset: string;
  reward: string;
  user: string;
  assetIndex: BigNumber;
  userIndex: BigNumber;
  rewardsAccrued: BigNumber;
}
export type AccruedEvent = TypedEvent<[string, string, string, BigNumber, BigNumber, BigNumber], AccruedEventObject>;

export type AccruedEventFilter = TypedEventFilter<AccruedEvent>;

export interface AssetConfigUpdatedEventObject {
  asset: string;
  reward: string;
  oldEmission: BigNumber;
  newEmission: BigNumber;
  oldDistributionEnd: BigNumber;
  newDistributionEnd: BigNumber;
  assetIndex: BigNumber;
}
export type AssetConfigUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  AssetConfigUpdatedEventObject
>;

export type AssetConfigUpdatedEventFilter = TypedEventFilter<AssetConfigUpdatedEvent>;

export interface ClaimerSetEventObject {
  user: string;
  claimer: string;
}
export type ClaimerSetEvent = TypedEvent<[string, string], ClaimerSetEventObject>;

export type ClaimerSetEventFilter = TypedEventFilter<ClaimerSetEvent>;

export interface EmissionManagerUpdatedEventObject {
  oldEmissionManager: string;
  newEmissionManager: string;
}
export type EmissionManagerUpdatedEvent = TypedEvent<[string, string], EmissionManagerUpdatedEventObject>;

export type EmissionManagerUpdatedEventFilter = TypedEventFilter<EmissionManagerUpdatedEvent>;

export interface RewardOracleUpdatedEventObject {
  reward: string;
  rewardOracle: string;
}
export type RewardOracleUpdatedEvent = TypedEvent<[string, string], RewardOracleUpdatedEventObject>;

export type RewardOracleUpdatedEventFilter = TypedEventFilter<RewardOracleUpdatedEvent>;

export interface RewardsClaimedEventObject {
  user: string;
  reward: string;
  to: string;
  claimer: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<[string, string, string, string, BigNumber], RewardsClaimedEventObject>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TransferStrategyInstalledEventObject {
  reward: string;
  transferStrategy: string;
}
export type TransferStrategyInstalledEvent = TypedEvent<[string, string], TransferStrategyInstalledEventObject>;

export type TransferStrategyInstalledEventFilter = TypedEventFilter<TransferStrategyInstalledEvent>;

export interface RewardsController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimAllRewards(
      assets: string[],
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimAllRewardsOnBehalf(
      assets: string[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimAllRewardsToSelf(assets: string[], overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimRewardsOnBehalf(
      assets: string[],
      amount: BigNumberish,
      user: string,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimRewardsToSelf(
      assets: string[],
      amount: BigNumberish,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    configureAssets(
      config: RewardsDataTypes.RewardsConfigInputStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllUserRewards(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        rewardsList: string[];
        unclaimedAmounts: BigNumber[];
      }
    >;

    getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<[number]>;

    getClaimer(user: string, overrides?: CallOverrides): Promise<[string]>;

    getDistributionEnd(asset: string, reward: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getEmissionManager(overrides?: CallOverrides): Promise<[string]>;

    getRewardOracle(reward: string, overrides?: CallOverrides): Promise<[string]>;

    getRewardsByAsset(asset: string, overrides?: CallOverrides): Promise<[string[]]>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRewardsList(overrides?: CallOverrides): Promise<[string[]]>;

    getTransferStrategy(reward: string, overrides?: CallOverrides): Promise<[string]>;

    getUserAccruedRewards(user: string, reward: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserAssetIndex(user: string, asset: string, reward: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserRewards(assets: string[], user: string, reward: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    handleAction(
      user: string,
      totalSupply: BigNumberish,
      userBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(emissionManager: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setClaimer(user: string, caller: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setDistributionEnd(
      asset: string,
      reward: string,
      newDistributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEmissionManager(
      emissionManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEmissionPerSecond(
      asset: string,
      rewards: string[],
      newEmissionsPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRewardOracle(
      reward: string,
      rewardOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTransferStrategy(
      reward: string,
      transferStrategy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  claimAllRewards(
    assets: string[],
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimAllRewardsOnBehalf(
    assets: string[],
    user: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimAllRewardsToSelf(assets: string[], overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  claimRewards(
    assets: string[],
    amount: BigNumberish,
    to: string,
    reward: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimRewardsOnBehalf(
    assets: string[],
    amount: BigNumberish,
    user: string,
    to: string,
    reward: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimRewardsToSelf(
    assets: string[],
    amount: BigNumberish,
    reward: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  configureAssets(
    config: RewardsDataTypes.RewardsConfigInputStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllUserRewards(
    assets: string[],
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & {
      rewardsList: string[];
      unclaimedAmounts: BigNumber[];
    }
  >;

  getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<number>;

  getClaimer(user: string, overrides?: CallOverrides): Promise<string>;

  getDistributionEnd(asset: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

  getEmissionManager(overrides?: CallOverrides): Promise<string>;

  getRewardOracle(reward: string, overrides?: CallOverrides): Promise<string>;

  getRewardsByAsset(asset: string, overrides?: CallOverrides): Promise<string[]>;

  getRewardsData(
    asset: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getRewardsList(overrides?: CallOverrides): Promise<string[]>;

  getTransferStrategy(reward: string, overrides?: CallOverrides): Promise<string>;

  getUserAccruedRewards(user: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

  getUserAssetIndex(user: string, asset: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

  getUserRewards(assets: string[], user: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

  handleAction(
    user: string,
    totalSupply: BigNumberish,
    userBalance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(emissionManager: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setClaimer(user: string, caller: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setDistributionEnd(
    asset: string,
    reward: string,
    newDistributionEnd: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEmissionManager(emissionManager: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setEmissionPerSecond(
    asset: string,
    rewards: string[],
    newEmissionsPerSecond: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRewardOracle(
    reward: string,
    rewardOracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTransferStrategy(
    reward: string,
    transferStrategy: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    claimAllRewards(
      assets: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        rewardsList: string[];
        claimedAmounts: BigNumber[];
      }
    >;

    claimAllRewardsOnBehalf(
      assets: string[],
      user: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        rewardsList: string[];
        claimedAmounts: BigNumber[];
      }
    >;

    claimAllRewardsToSelf(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        rewardsList: string[];
        claimedAmounts: BigNumber[];
      }
    >;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewardsOnBehalf(
      assets: string[],
      amount: BigNumberish,
      user: string,
      to: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewardsToSelf(
      assets: string[],
      amount: BigNumberish,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configureAssets(config: RewardsDataTypes.RewardsConfigInputStruct[], overrides?: CallOverrides): Promise<void>;

    getAllUserRewards(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        rewardsList: string[];
        unclaimedAmounts: BigNumber[];
      }
    >;

    getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<number>;

    getClaimer(user: string, overrides?: CallOverrides): Promise<string>;

    getDistributionEnd(asset: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getEmissionManager(overrides?: CallOverrides): Promise<string>;

    getRewardOracle(reward: string, overrides?: CallOverrides): Promise<string>;

    getRewardsByAsset(asset: string, overrides?: CallOverrides): Promise<string[]>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRewardsList(overrides?: CallOverrides): Promise<string[]>;

    getTransferStrategy(reward: string, overrides?: CallOverrides): Promise<string>;

    getUserAccruedRewards(user: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserAssetIndex(user: string, asset: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserRewards(assets: string[], user: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    handleAction(
      user: string,
      totalSupply: BigNumberish,
      userBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(emissionManager: string, overrides?: CallOverrides): Promise<void>;

    setClaimer(user: string, caller: string, overrides?: CallOverrides): Promise<void>;

    setDistributionEnd(
      asset: string,
      reward: string,
      newDistributionEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmissionManager(emissionManager: string, overrides?: CallOverrides): Promise<void>;

    setEmissionPerSecond(
      asset: string,
      rewards: string[],
      newEmissionsPerSecond: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardOracle(reward: string, rewardOracle: string, overrides?: CallOverrides): Promise<void>;

    setTransferStrategy(reward: string, transferStrategy: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Accrued(address,address,address,uint256,uint256,uint256)'(
      asset?: string | null,
      reward?: string | null,
      user?: string | null,
      assetIndex?: null,
      userIndex?: null,
      rewardsAccrued?: null
    ): AccruedEventFilter;
    Accrued(
      asset?: string | null,
      reward?: string | null,
      user?: string | null,
      assetIndex?: null,
      userIndex?: null,
      rewardsAccrued?: null
    ): AccruedEventFilter;

    'AssetConfigUpdated(address,address,uint256,uint256,uint256,uint256,uint256)'(
      asset?: string | null,
      reward?: string | null,
      oldEmission?: null,
      newEmission?: null,
      oldDistributionEnd?: null,
      newDistributionEnd?: null,
      assetIndex?: null
    ): AssetConfigUpdatedEventFilter;
    AssetConfigUpdated(
      asset?: string | null,
      reward?: string | null,
      oldEmission?: null,
      newEmission?: null,
      oldDistributionEnd?: null,
      newDistributionEnd?: null,
      assetIndex?: null
    ): AssetConfigUpdatedEventFilter;

    'ClaimerSet(address,address)'(user?: string | null, claimer?: string | null): ClaimerSetEventFilter;
    ClaimerSet(user?: string | null, claimer?: string | null): ClaimerSetEventFilter;

    'EmissionManagerUpdated(address,address)'(
      oldEmissionManager?: string | null,
      newEmissionManager?: string | null
    ): EmissionManagerUpdatedEventFilter;
    EmissionManagerUpdated(
      oldEmissionManager?: string | null,
      newEmissionManager?: string | null
    ): EmissionManagerUpdatedEventFilter;

    'RewardOracleUpdated(address,address)'(
      reward?: string | null,
      rewardOracle?: string | null
    ): RewardOracleUpdatedEventFilter;
    RewardOracleUpdated(reward?: string | null, rewardOracle?: string | null): RewardOracleUpdatedEventFilter;

    'RewardsClaimed(address,address,address,address,uint256)'(
      user?: string | null,
      reward?: string | null,
      to?: string | null,
      claimer?: null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      user?: string | null,
      reward?: string | null,
      to?: string | null,
      claimer?: null,
      amount?: null
    ): RewardsClaimedEventFilter;

    'TransferStrategyInstalled(address,address)'(
      reward?: string | null,
      transferStrategy?: string | null
    ): TransferStrategyInstalledEventFilter;
    TransferStrategyInstalled(
      reward?: string | null,
      transferStrategy?: string | null
    ): TransferStrategyInstalledEventFilter;
  };

  estimateGas: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    claimAllRewards(assets: string[], to: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    claimAllRewardsOnBehalf(
      assets: string[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimAllRewardsToSelf(assets: string[], overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimRewardsOnBehalf(
      assets: string[],
      amount: BigNumberish,
      user: string,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimRewardsToSelf(
      assets: string[],
      amount: BigNumberish,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    configureAssets(
      config: RewardsDataTypes.RewardsConfigInputStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllUserRewards(assets: string[], user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClaimer(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionEnd(asset: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getEmissionManager(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardOracle(reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsByAsset(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsData(asset: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsList(overrides?: CallOverrides): Promise<BigNumber>;

    getTransferStrategy(reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccruedRewards(user: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserAssetIndex(user: string, asset: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserRewards(assets: string[], user: string, reward: string, overrides?: CallOverrides): Promise<BigNumber>;

    handleAction(
      user: string,
      totalSupply: BigNumberish,
      userBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(emissionManager: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setClaimer(user: string, caller: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setDistributionEnd(
      asset: string,
      reward: string,
      newDistributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEmissionManager(emissionManager: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setEmissionPerSecond(
      asset: string,
      rewards: string[],
      newEmissionsPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRewardOracle(
      reward: string,
      rewardOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTransferStrategy(
      reward: string,
      transferStrategy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAllRewards(
      assets: string[],
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimAllRewardsOnBehalf(
      assets: string[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimAllRewardsToSelf(assets: string[], overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimRewardsOnBehalf(
      assets: string[],
      amount: BigNumberish,
      user: string,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimRewardsToSelf(
      assets: string[],
      amount: BigNumberish,
      reward: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    configureAssets(
      config: RewardsDataTypes.RewardsConfigInputStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllUserRewards(assets: string[], user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimer(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDistributionEnd(asset: string, reward: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEmissionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardOracle(reward: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardsByAsset(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardsData(asset: string, reward: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransferStrategy(reward: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAccruedRewards(user: string, reward: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAssetIndex(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewards(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleAction(
      user: string,
      totalSupply: BigNumberish,
      userBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(emissionManager: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setClaimer(user: string, caller: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setDistributionEnd(
      asset: string,
      reward: string,
      newDistributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEmissionManager(
      emissionManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEmissionPerSecond(
      asset: string,
      rewards: string[],
      newEmissionsPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRewardOracle(
      reward: string,
      rewardOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTransferStrategy(
      reward: string,
      transferStrategy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
